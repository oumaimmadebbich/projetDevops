version: "3.8"

services:
  mysqlDb:
    image: mysql:5.7
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=nidhal
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql

  app-nidhal:
    depends_on:
      - mysqlDb
    image: nidhal198/tpfoyer:0.0.1
    restart: on-failure
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url": "jdbc:mysql://mysqlDb:3306/nidhal?createDatabaseIfNotExist=true",
        "spring.datasource.username": "root",
        "spring.datasource.password": "rootpassword",
        "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto": "update"
      }'
    stdin_open: true
    tty: true
 prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"  # Port exposé pour accéder à Prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Votre fichier de configuration Prometheus
    networks:
      - monitoring  # Crée une réseau dédié pour la surveillance

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"  # Port exposé pour accéder à Grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Définir un mot de passe pour l'administrateur Grafana
    depends_on:
      - prometheus  # Assurez-vous que Prometheus démarre avant Grafana
    networks:
      - monitoring  # Utilisation du même réseau que Prometheus pour faciliter la communication

  
volumes:
  db:  # Volume pour MySQL

networks:
  monitoring:  # Crée un réseau dédié pour Prometheus et Grafana
